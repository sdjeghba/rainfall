On lance le binaire et on se rend compte qu'il duplique ce que l'on écrit sur l'entrée standard. 

>$ (gdb) objdump -d level4

On peut voir que le <main> fait appel à une fonction <n>. On parcours <n> celle ci utilise la fonction fgets(). L’utilisation de fgets() à la place de gets() complique la tâche de réalisation d’un buffer overflow : 

“The gets() function cannot be used securely.  Because of its lack of bounds checking, and the inability for the calling program to reliably determine the length of the next incoming line, the use of this function enables malicious users to arbitrarily change a running program's functionality through a buffer overflow attack.  It is strongly suggested that the fgets() function be used in all cases.”

char *fgets(char *restrict str, int size,FILE * restrict stream);

(gdb) disas n
Dump of assembler code for function n:
   0x08048457 <+0>:	  push   %ebp
   0x08048458 <+1>:	  mov    %esp,%ebp
   0x0804845a <+3>:	  sub    $0x218,%esp
   0x08048460 <+9>:	  mov    0x8049804,%eax           (1) restrict stream : 0x8049860=STDIN
   0x08048465 <+14>:	mov    %eax,0x8(%esp)
   0x08048469 <+18>:	movl   $0x200,0x4(%esp)         (2) size
   0x08048471 <+26>:	lea    -0x208(%ebp),%eax        (3) restrict str (notre input)
   0x08048477 <+32>:	mov    %eax,(%esp)
   0x0804847a <+35>:	call   0x8048350 <fgets@plt>    (4) appel fgets avec les arguments (1), (2) & (3)
   0x0804847f <+40>:	lea    -0x208(%ebp),%eax
   0x08048485 <+46>:	mov    %eax,(%esp)              (5) push notre input en argument pour <p>
   0x08048488 <+49>:	call   0x8048444 <p>            (6) appel <p> qui nous affiche notre input
              --------------------------------------------------------------------------------------------
              CALL <p>
              0x08048444 <+0>:	push   %ebp
              0x08048445 <+1>:	mov    %esp,%ebp
              0x08048447 <+3>:	sub    $0x18,%esp
              0x0804844a <+6>:	mov    0x8(%ebp),%eax
              0x0804844d <+9>:	mov    %eax,(%esp)
              0x08048450 <+12>:	call   0x8048340 <printf@plt>
              0x08048455 <+17>:	leave
              0x08048456 <+18>:	ret
              ----------------------------------------------------------------------------------------------
   0x0804848d <+54>:	mov    0x8049810,%eax
   0x08048492 <+59>:	cmp    $0x1025544,%eax
   0x08048497 <+64>:	jne    0x80484a5 <n+78>
   0x08048499 <+66>:	movl   $0x8048590,(%esp)
   0x080484a0 <+73>:	call   0x8048360 <system@plt>
   0x080484a5 <+78>:	leave
   0x080484a6 <+79>:	ret
End of assembler dump.
